import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import static javax.swing.JFrame.EXIT_ON_CLOSE;

public class GUImain extends javax.swing.JFrame implements Runnable {

    int width;
    int height;
    int length;
    int anchRadius;
    int ballRadius;
    int minLength = 100;
    int maxLength = 350;
    int minBallSize = 100;
    int maxBallSize = 300;
    int sleepValue = 20;
    
    boolean paused = false;
    boolean calculateEnergyAndVelocity = false;
    boolean firstClickedGrav = true;
    boolean firstClickedSpeed = true;

    Thread animator;
    Ball b;
    Anchor a;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel5 = new javax.swing.JLabel();
        pendulumDisplay = new javax.swing.JPanel();
        start = new javax.swing.JButton();
        pauseAndResume = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ballSizeText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        pendLengthText = new javax.swing.JTextField();
        ballSizeSlider = new javax.swing.JSlider();
        pendLengthSlider = new javax.swing.JSlider();
        Gravity = new java.awt.Checkbox();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        ballMassText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        calculate = new javax.swing.JButton();
        reduceSpeed = new java.awt.Checkbox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel5.setText("Pendulum Simulation");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 11, -1, -1));

        pendulumDisplay.setBackground(new java.awt.Color(0, 0, 0));
        pendulumDisplay.setForeground(new java.awt.Color(240, 240, 240));
        pendulumDisplay.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pendulumDisplayMouseDragged(evt);
            }
        });
        pendulumDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pendulumDisplayMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout pendulumDisplayLayout = new javax.swing.GroupLayout(pendulumDisplay);
        pendulumDisplay.setLayout(pendulumDisplayLayout);
        pendulumDisplayLayout.setHorizontalGroup(
            pendulumDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 760, Short.MAX_VALUE)
        );
        pendulumDisplayLayout.setVerticalGroup(
            pendulumDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 589, Short.MAX_VALUE)
        );

        getContentPane().add(pendulumDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 66, 760, -1));

        start.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        start.setText("Start");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });
        getContentPane().add(start, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 680, 90, 30));

        pauseAndResume.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pauseAndResume.setText("Pause");
        pauseAndResume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseAndResumeActionPerformed(evt);
            }
        });
        getContentPane().add(pauseAndResume, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 680, 90, 30));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Ball Size");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        ballSizeText.setText("100");
        jPanel1.add(ballSizeText, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Pendulum Length");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        pendLengthText.setText("100");
        jPanel1.add(pendLengthText, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, -1, -1));

        ballSizeSlider.setMaximum(300);
        ballSizeSlider.setMinimum(100);
        ballSizeSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                ballSizeSliderMouseDragged(evt);
            }
        });
        jPanel1.add(ballSizeSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 229, -1));

        pendLengthSlider.setMaximum(350);
        pendLengthSlider.setMinimum(100);
        pendLengthSlider.setToolTipText("");
        pendLengthSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pendLengthSliderMouseDragged(evt);
            }
        });
        jPanel1.add(pendLengthSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 229, -1));

        Gravity.setLabel("Gravity");
        Gravity.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GravityMouseClicked(evt);
            }
        });
        jPanel1.add(Gravity, new org.netbeans.lib.awtextra.AbsoluteConstraints(383, 92, -1, -1));

        jTabbedPane1.addTab("Settings", jPanel1);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Ball Mass (kg)");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));

        ballMassText.setText("100");
        jPanel2.add(ballMassText, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Kinetic energy");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, -1));

        jLabel6.setText("0");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("x-Velocity");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("y-Velocity");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, -1, -1));

        jLabel11.setText("0");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 50, -1, -1));

        jLabel12.setText("0");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, -1, -1));

        calculate.setText("Calculate");
        calculate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calculateMouseClicked(evt);
            }
        });
        jPanel2.add(calculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, -1, -1));

        reduceSpeed.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        reduceSpeed.setLabel("Reduce Speed");
        reduceSpeed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reduceSpeedMouseClicked(evt);
            }
        });
        jPanel2.add(reduceSpeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, -1, -1));

        jTabbedPane1.addTab("Energy and Velocity ", jPanel2);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 670, 460, 150));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    public void drawPendulum(){
        Graphics g = pendulumDisplay.getGraphics();
        Image img = getImage();
        g.drawImage(img,0,0,rootPane);
    }
    public Image getImage() { //Creates the pendulum 
        BufferedImage bi = new BufferedImage( width, height, BufferedImage.TYPE_INT_RGB );
        Graphics2D g2 = (Graphics2D) bi.getGraphics();
        g2.setColor(Color.black);
        g2.fillRect(0, 0, width, height);
        g2.setColor(Color.white);
        g2.drawLine(b.xPos,b.yPos, a.xPos + 2*a.radius , a.yPos+a.radius);
        g2.fillOval(a.xPos+a.radius, a.yPos, 2*a.radius, 2*a.radius);
        g2.fillOval(b.xPos-b.radius, b.yPos-b.radius, 2*b.radius, 2*b.radius);
        g2.drawString("Angle with center", 650, 550);
        g2.drawString(Double.toString(Math.round(b.angle*180/Math.PI)), 685, 575);
        return bi;
    }
    public static void sleep(int duration) { //Sleep
        try {
            Thread.sleep(duration);
        } catch (Exception e) {
        }
    }

    public void initializeSimulation() {
        width = pendulumDisplay.getWidth(); //set width and height variables
        height = pendulumDisplay.getHeight();
        anchRadius = 5;
        a = new Anchor(width / 2, height / 8, anchRadius); //create ball and anchor object
        b = new Ball(Math.PI / 2, 0.0, 0.0, ballRadius, length, a);
        

        if(Integer.parseInt(ballSizeText.getText()) > maxBallSize){ //Checks for input on ball size that are restricted
            ballSizeText.setText(Integer.toString(maxBallSize)); 
        }
        
        else if (Integer.parseInt(ballSizeText.getText()) < minBallSize){
            ballSizeText.setText(Integer.toString(minBallSize));   
        }
        if(Integer.parseInt(pendLengthText.getText()) > maxLength){
            pendLengthText.setText(Integer.toString(maxLength));
        }
        else if(Integer.parseInt(pendLengthText.getText()) < minLength){
            pendLengthText.setText(Integer.toString(minLength));  
        }

        
        b.radius = Integer.parseInt(ballSizeText.getText())/2; //Sets the corrected values into the text fields
        b.length = Integer.parseInt(pendLengthText.getText())+b.radius;
        pendLengthSlider.setValue(Integer.parseInt(pendLengthText.getText()));
    }
    
    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        if(paused == true){ //if paused restart animation
            paused = false;   
        }
        initializeSimulation();

        if(Gravity.getState() == true){ //if gravity box is checked
            b.dampener = 0.995;
        }
        else{
            b.dampener = 1;
        }
        if(reduceSpeed.getState() == true){ //if speed reduction box is checked
            sleepValue = 75;
        }
        else{
            sleepValue = 20;
        }
        pauseAndResume.setText("Pause");
        
        animator = new Thread(this);  //Sets the thread the while-loop in Run() calls 
        animator.start();

    }//GEN-LAST:event_startActionPerformed

    private void pauseAndResumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseAndResumeActionPerformed
        if (animator == null) { //if the animation is stopped
            animator = new Thread(this); //Sets new thread
            animator.start();
            pauseAndResume.setText("Pause");
            paused = false;
        } else {  //if the animation is running
            animator = null; //Stops the thread, and pauses the animation
            pauseAndResume.setText("Resume");
            paused = true;
        }
    }//GEN-LAST:event_pauseAndResumeActionPerformed

    private void pendLengthSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pendLengthSliderMouseDragged
        b.length = pendLengthSlider.getValue()+b.radius; //sets the length of the pendulum (with correction factor)
        pendLengthText.setText(Integer.toString(b.length-b.radius)); //sets the text to the length of the pendulum
        b.calculateBallPosition(); //calculates and updates the pendulum as you're dragging
        drawPendulum();
    }//GEN-LAST:event_pendLengthSliderMouseDragged

    private void ballSizeSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ballSizeSliderMouseDragged
        b.radius = ballSizeSlider.getValue()/2; //sets the radius of the ball to the value of the slider
        ballSizeText.setText(Integer.toString(b.radius*2));//sets the text to the radius of the ball
        b.length = pendLengthSlider.getValue()+b.radius; //length correction factor (length is from anchor to center of the ball, while the pendulum length is from the anchor to the outside edge of the ball)
        b.calculateBallPosition();//calculates and updates the pendulum as you're dragging
        drawPendulum();
    }//GEN-LAST:event_ballSizeSliderMouseDragged

    private void GravityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GravityMouseClicked
        if(firstClickedGrav == true){//first time indicator to fix IDE bug
            Gravity.setState(true);
            firstClickedGrav = false;
        }
        if(Gravity.getState()==true){//set dampener based on state of checkbox
            b.dampener = 0.995;
        }
        else{
            b.dampener = 1;
        }
    }//GEN-LAST:event_GravityMouseClicked

    private void calculateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calculateMouseClicked
        if(calculateEnergyAndVelocity == false){
            calculateEnergyAndVelocity = true;
            calculate.setText("Stop calculating");
        }
        else{
            calculateEnergyAndVelocity = false;
            calculate.setText("Calculate");
        }
        
        
    }//GEN-LAST:event_calculateMouseClicked

    private void reduceSpeedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reduceSpeedMouseClicked
        if(firstClickedSpeed == true){ //first time indicator to fix IDE bug
            reduceSpeed.setState(true);
            firstClickedSpeed = false;
        }
        
        if(reduceSpeed.getState()==true){//set sleep value based on state of checkbox
            sleepValue = 75;
        }
        else{
            sleepValue = 20;
        }
    }//GEN-LAST:event_reduceSpeedMouseClicked

    private void pendulumDisplayMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pendulumDisplayMouseReleased
        paused = false;
        if(b.length-b.radius<minLength){//Resets pendulum length based on restrictions on length and radius
            pendLengthText.setText(Integer.toString(minLength));
        }
        else if(b.length-b.radius> maxLength){
            pendLengthText.setText(Integer.toString(maxLength));
        }
        else{
            pendLengthText.setText(Integer.toString(b.length-b.radius));
        }
        //Set the new length and text field, based on restricted values
        b.length = Integer.parseInt(pendLengthText.getText())+b.radius;
        pendLengthSlider.setValue(b.length-b.radius);
        b.calculateBallPosition();
        drawPendulum();

    }//GEN-LAST:event_pendulumDisplayMouseReleased

    private void pendulumDisplayMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pendulumDisplayMouseDragged
        paused = true;
        if(calculateEnergyAndVelocity == true){ //Stops the calculating of energy and velocity while the ball position is being dragged
            calculateEnergyAndVelocity = false;
            calculate.setText("Calculate");
        }
        int x = evt.getX();
        int y = evt.getY();

        drawPendulum();
        b.aAcceleration = 0;
        b.aVelocity = 0;
        b.xPos = x;
        b.yPos = y;
       
        //changes the displayed values as pendulum is dragged
        if(b.length -b.radius< minLength){
            b.length=minLength+b.radius;
        }
        else if(b.length -b.radius> maxLength){
            b.length=maxLength+b.radius;
        }
        else{
            b.length = (int)(Math.sqrt(Math.pow(b.yPos-a.yPos, 2)+ Math.pow(b.xPos-a.xPos, 2)));
            pendLengthText.setText(Integer.toString(b.length-b.radius));
            pendLengthSlider.setValue(b.length-b.radius);
        }

        //Calculates new angle made with center resting position while ball is being dragged
        Point2D anchorPoint = new Point2D (a.xPos,a.yPos);
        Point2D ballPoint = new Point2D (b.xPos,b.yPos);
        Vector midVector = new Vector(0,1);
        Vector currentVector = ballPoint.subtract(anchorPoint);

        if(b.xPos < a.xPos){
            b.angle = -midVector.getAngle(currentVector);
        }
        else{
            b.angle = midVector.getAngle(currentVector);
        }

    }//GEN-LAST:event_pendulumDisplayMouseDragged
    public void run() {
        //this while-loop runs the Game of Life animation
        while (Thread.currentThread() == animator) { //runs when paused is equal to false
            sleep(sleepValue);

            if (paused == false) {               
                b.updatePendulum();
            }
            //changes value of labels to display kinetic energy and velocity components
            if(calculateEnergyAndVelocity == true){
                b.mass = Double.parseDouble(ballMassText.getText());
                b.calculateEnergy(b.aVelocity);
                b.calculateVelocityComponents();
                jLabel6.setText(Double.toString(b.kineticEnergy) + " J");
                jLabel11.setText(Double.toString(b.xVelocity) + " Units/second");
                jLabel12.setText(Double.toString(b.yVelocity) + " Units/second");
            }

            drawPendulum();
        }
    }

    public GUImain() {
        initComponents();
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUImain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUImain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUImain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUImain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GUImain gM = new GUImain();
                gM.setDefaultCloseOperation(EXIT_ON_CLOSE);
                gM.setVisible(true);
                gM.initializeSimulation();
                gM.drawPendulum();
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Checkbox Gravity;
    private javax.swing.JTextField ballMassText;
    private javax.swing.JSlider ballSizeSlider;
    private javax.swing.JTextField ballSizeText;
    private javax.swing.JButton calculate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton pauseAndResume;
    private javax.swing.JSlider pendLengthSlider;
    private javax.swing.JTextField pendLengthText;
    private javax.swing.JPanel pendulumDisplay;
    private java.awt.Checkbox reduceSpeed;
    private javax.swing.JButton start;
    // End of variables declaration//GEN-END:variables
}
